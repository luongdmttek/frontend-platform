{"version":3,"file":"NewRelicLoggingService.js","names":["MAX_ERROR_LENGTH","fixErrorLength","error","message","length","processedError","Object","create","substring","pageActionNameInfo","pageActionNameIgnoredError","sendPageAction","actionName","customAttributes","process","env","NODE_ENV","console","log","window","newrelic","addPageAction","_objectSpread","sendError","noticeError","setCustomAttribute","name","value","NewRelicLoggingService","options","_classCallCheck","config","undefined","ignoredErrorRegexes","IGNORED_ERROR_REGEX","_createClass","key","logInfo","infoStringOrErrorObject","arguments","customAttrs","_typeof","infoCustomAttributes","logError","errorStringOrObject","errorCustomAttributes","allCustomAttributes","keys","errorMessage","match","default"],"sources":["../../src/logging/NewRelicLoggingService.js"],"sourcesContent":["/**\r\n * NewRelic will not log an error if it is too long.\r\n *\r\n * @ignore\r\n */\r\nexport const MAX_ERROR_LENGTH = 4000;\r\n\r\nfunction fixErrorLength(error) {\r\n  if (error.message && error.message.length > MAX_ERROR_LENGTH) {\r\n    const processedError = Object.create(error);\r\n    processedError.message = processedError.message.substring(0, MAX_ERROR_LENGTH);\r\n    return processedError;\r\n  }\r\n  if (typeof error === 'string' && error.length > MAX_ERROR_LENGTH) {\r\n    return error.substring(0, MAX_ERROR_LENGTH);\r\n  }\r\n  return error;\r\n}\r\n\r\n/* Constants used as New Relic page action names. */\r\nconst pageActionNameInfo = 'INFO';\r\nconst pageActionNameIgnoredError = 'IGNORED_ERROR';\r\n\r\nfunction sendPageAction(actionName, message, customAttributes) {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log(actionName, message, customAttributes); // eslint-disable-line\r\n  }\r\n  if (window && typeof window.newrelic !== 'undefined') {\r\n    // https://docs.newrelic.com/docs/browser/new-relic-browser/browser-apis/addpageaction/\r\n    window.newrelic.addPageAction(actionName, { message, ...customAttributes });\r\n  }\r\n}\r\n\r\nfunction sendError(error, customAttributes) {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.error(error, customAttributes); // eslint-disable-line\r\n  }\r\n  if (window && typeof window.newrelic !== 'undefined') {\r\n    // https://docs.newrelic.com/docs/browser/new-relic-browser/browser-apis/noticeerror/\r\n    window.newrelic.noticeError(fixErrorLength(error), customAttributes);\r\n  }\r\n}\r\n\r\nfunction setCustomAttribute(name, value) {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log(name, value); // eslint-disable-line\r\n  }\r\n  if (window && typeof window.newrelic !== 'undefined') {\r\n    // https://docs.newrelic.com/docs/browser/new-relic-browser/browser-apis/setcustomattribute/\r\n    window.newrelic.setCustomAttribute(name, value);\r\n  }\r\n}\r\n\r\n/**\r\n * The NewRelicLoggingService is a concrete implementation of the logging service interface that\r\n * sends messages to NewRelic that can be seen in NewRelic Browser and NewRelic Insights. When in\r\n * development mode, all messages will instead be sent to the console.\r\n *\r\n * When you use `logError`, your errors will be checked to see if they're ignored *or* not.\r\n * Not-ignored errors will appear under \"JS errors\" for your Browser application.\r\n *\r\n * ```\r\n * SELECT * from JavaScriptError WHERE errorStatus is not null SINCE 10 days ago\r\n * ```\r\n *\r\n * Ignored errors will appear in New Relic Insights as page actions, which can be queried:\r\n *\r\n * ```\r\n * SELECT * from PageAction WHERE actionName = 'IGNORED_ERROR' SINCE 1 hour ago\r\n * ```\r\n *\r\n * When using `logInfo`, these only appear in New Relic Insights when querying for page actions as\r\n * follows:\r\n *\r\n * ```\r\n * SELECT * from PageAction WHERE actionName = 'INFO' SINCE 1 hour ago\r\n * ```\r\n *\r\n * You can also add your own custom metrics as an additional argument, or see the code to find\r\n * other standard custom attributes. By default, userId is added (via setCustomAttribute) for logged\r\n * in users via the auth service (AuthAxiosJwtService).\r\n *\r\n * Requires the NewRelic Browser JavaScript snippet.\r\n *\r\n * @implements {LoggingService}\r\n * @memberof module:Logging\r\n */\r\nexport default class NewRelicLoggingService {\r\n  constructor(options) {\r\n    const config = options ? options.config : undefined;\r\n    /*\r\n        String which is an explicit error message regex. If an error message matches the regex, the error\r\n        is considered an *ignored* error and submitted to New Relic as a page action - not an error.\r\n\r\n        Ignored error regexes are configured per frontend application (MFE).\r\n\r\n        The regex for all ignored errors are represented in the .env files as a single string. If you need to\r\n        ignore multiple errors, use the standard `|` regex syntax.\r\n\r\n        For example, here's a .env line which ignores two specific errors:\r\n\r\n        IGNORED_ERROR_REGEX='^\\\\[frontend-auth\\\\] Unimportant Error|Specific non-critical error #[\\\\d]+'\r\n\r\n        This example would ignore errors with the following messages:\r\n\r\n        [frontend-app-generic] - Specific non-critical error #45678 happened.\r\n        [frontend-app-generic] - Specific non-critical error #93475 happened.\r\n        [frontend-auth] Unimportant Error: Browser strangeness occurred.\r\n\r\n        To test your regex additions, use a JS CLI environment (such as node) and run code like this:\r\n\r\n        x = new RegExp('^\\\\[frontend-auth\\\\] Unimportant Error|Specific non-critical error #[\\\\d]+');\r\n        '[frontend-app-generic] - Specific non-critical error #45678 happened.'.match(x);\r\n        '[frontend-auth] Unimportant Error: Browser strangeness occurred.'.match(x);\r\n        'This error should not match anything!'.match(x);\r\n\r\n        For edx.org, add new error message regexes in edx-internal YAML as needed.\r\n    */\r\n    this.ignoredErrorRegexes = config ? config.IGNORED_ERROR_REGEX : undefined;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} infoStringOrErrorObject\r\n   * @param {*} [customAttributes={}]\r\n   * @memberof NewRelicLoggingService\r\n   */\r\n  logInfo(infoStringOrErrorObject, customAttributes = {}) {\r\n    let message = infoStringOrErrorObject;\r\n    let customAttrs = customAttributes;\r\n    if (typeof infoStringOrErrorObject === 'object' && 'message' in infoStringOrErrorObject) {\r\n      /* Caller has passed in an error object to be logged as a page action. */\r\n      /* Extract the attributes and the message. */\r\n      const infoCustomAttributes = infoStringOrErrorObject.customAttributes || {};\r\n      customAttrs = { ...infoCustomAttributes, ...customAttributes };\r\n      message = infoStringOrErrorObject.message;\r\n    }\r\n    sendPageAction(pageActionNameInfo, message, customAttrs);\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} errorStringOrObject\r\n   * @param {*} [customAttributes={}]\r\n   * @memberof NewRelicLoggingService\r\n   */\r\n  logError(errorStringOrObject, customAttributes = {}) {\r\n    const errorCustomAttributes = errorStringOrObject.customAttributes || {};\r\n    let allCustomAttributes = { ...errorCustomAttributes, ...customAttributes };\r\n    if (Object.keys(allCustomAttributes).length === 0) {\r\n      // noticeError expects undefined if there are no custom attributes.\r\n      allCustomAttributes = undefined;\r\n    }\r\n\r\n    /*\r\n        Separate the errors into ignored errors and other errors.\r\n        Ignored errors are logged via adding a page action.\r\n        Other errors are logged via noticeError and count as \"JS Errors\" for the application.\r\n    */\r\n    const errorMessage = errorStringOrObject.message || (typeof errorStringOrObject === 'string' ? errorStringOrObject : '');\r\n    if (this.ignoredErrorRegexes && errorMessage.match(this.ignoredErrorRegexes)) {\r\n      /* ignored error */\r\n      sendPageAction(pageActionNameIgnoredError, errorMessage, allCustomAttributes);\r\n    } else {\r\n      /*  error! */\r\n      sendError(errorStringOrObject, allCustomAttributes);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a custom attribute that will be included with all subsequent log messages.\r\n   *\r\n   * @param {string} name\r\n   * @param {string|number|null} value\r\n   */\r\n  setCustomAttribute(name, value) {\r\n    setCustomAttribute(name, value);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}