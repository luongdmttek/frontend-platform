{"version":3,"file":"index.js","names":["createIntl","FormattedDate","FormattedTime","FormattedRelativeTime","FormattedNumber","FormattedPlural","FormattedMessage","defineMessages","IntlProvider","useIntl","intlShape","configure","getPrimaryLanguageSubtag","getLocale","getMessages","isRtl","handleRtl","mergeMessages","LOCALE_CHANGED","LOCALE_TOPIC","default","injectIntl","getCountryList","getCountryMessages","getLanguageList","getLanguageMessages"],"sources":["../../src/i18n/index.js"],"sourcesContent":["/**\r\n * #### Import members from **@edx/frontend-platform/i18n**\r\n * The i18n module relies on react-intl and re-exports all of that package's exports.\r\n *\r\n * For each locale we want to support, react-intl needs 1) the locale-data, which includes\r\n * information about how to format numbers, handle plurals, etc., and 2) the translations, as an\r\n * object holding message id / translated string pairs.  A locale string and the messages object are\r\n * passed into the IntlProvider element that wraps your element hierarchy.\r\n *\r\n * Note that react-intl has no way of checking if the translations you give it actually have\r\n * anything to do with the locale you pass it; it will happily use whatever messages object you pass\r\n * in.  However, if the locale data for the locale you passed into the IntlProvider was not\r\n * correctly installed with addLocaleData, all of your translations will fall back to the default\r\n * (in our case English), *even if you gave IntlProvider the correct messages object for that\r\n * locale*.\r\n *\r\n * Messages are provided to this module via the configure() function below.\r\n *\r\n *\r\n * @module Internationalization\r\n * @see {@link https://github.com/openedx/frontend-platform/blob/master/docs/how_tos/i18n.rst}\r\n * @see {@link https://formatjs.io/docs/react-intl/components/ Intl} for components exported from this module.\r\n *\r\n */\r\n\r\n/**\r\n * @name createIntl\r\n * @kind function\r\n * @see {@link https://formatjs.io/docs/react-intl/api#createIntl Intl}\r\n */\r\n\r\n/**\r\n * @name FormattedDate\r\n * @kind class\r\n * @see {@link https://formatjs.io/docs/react-intl/components/#formatteddate Intl}\r\n */\r\n\r\n/**\r\n * @name FormattedTime\r\n * @kind class\r\n * @see {@link https://formatjs.io/docs/react-intl/components/#formattedtime Intl}\r\n */\r\n\r\n/**\r\n * @name FormattedRelativeTime\r\n * @kind class\r\n * @see {@link https://formatjs.io/docs/react-intl/components/#formattedrelativetime Intl}\r\n */\r\n\r\n/**\r\n * @name FormattedNumber\r\n * @kind class\r\n * @see {@link https://formatjs.io/docs/react-intl/components/#formattednumber Intl}\r\n */\r\n\r\n/**\r\n * @name FormattedPlural\r\n * @kind class\r\n * @see {@link https://formatjs.io/docs/react-intl/components/#formattedplural Intl}\r\n */\r\n\r\n/**\r\n * @name FormattedMessage\r\n * @kind class\r\n * @see {@link https://formatjs.io/docs/react-intl/components/#formattedmessage Intl}\r\n */\r\n\r\n/**\r\n * @name IntlProvider\r\n * @kind class\r\n * @see {@link https://formatjs.io/docs/react-intl/components/#intlprovider Intl}\r\n */\r\n\r\n/**\r\n * @name defineMessages\r\n * @kind function\r\n * @see {@link https://formatjs.io/docs/react-intl/api#definemessagesdefinemessage Intl}\r\n */\r\n\r\n/**\r\n * @name useIntl\r\n * @kind function\r\n * @see {@link https://formatjs.io/docs/react-intl/api#useIntl Intl}\r\n */\r\n\r\nexport {\r\n  createIntl,\r\n  FormattedDate,\r\n  FormattedTime,\r\n  FormattedRelativeTime,\r\n  FormattedNumber,\r\n  FormattedPlural,\r\n  FormattedMessage,\r\n  defineMessages,\r\n  IntlProvider,\r\n  useIntl,\r\n} from 'react-intl';\r\n\r\nexport {\r\n  intlShape,\r\n  configure,\r\n  getPrimaryLanguageSubtag,\r\n  getLocale,\r\n  getMessages,\r\n  isRtl,\r\n  handleRtl,\r\n  mergeMessages,\r\n  LOCALE_CHANGED,\r\n  LOCALE_TOPIC,\r\n} from './lib';\r\n\r\nexport {\r\n  default as injectIntl,\r\n} from './injectIntlWithShim';\r\n\r\nexport {\r\n  getCountryList,\r\n  getCountryMessages,\r\n} from './countries';\r\n\r\nexport {\r\n  getLanguageList,\r\n  getLanguageMessages,\r\n} from './languages';\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SACEA,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,qBAAqB,EACrBC,eAAe,EACfC,eAAe,EACfC,gBAAgB,EAChBC,cAAc,EACdC,YAAY,EACZC,OAAO,QACF,YAAY;AAEnB,SACEC,SAAS,EACTC,SAAS,EACTC,wBAAwB,EACxBC,SAAS,EACTC,WAAW,EACXC,KAAK,EACLC,SAAS,EACTC,aAAa,EACbC,cAAc,EACdC,YAAY,QACP,OAAO;AAEd,SACEC,OAAO,IAAIC,UAAU,QAChB,sBAAsB;AAE7B,SACEC,cAAc,EACdC,kBAAkB,QACb,aAAa;AAEpB,SACEC,eAAe,EACfC,mBAAmB,QACd,aAAa"}