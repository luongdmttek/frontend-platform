{"version":3,"file":"utils.js","names":["camelCase","snakeCase","modifyObjectKeys","object","modify","undefined","_typeof","Array","isArray","map","value","result","Object","entries","forEach","_ref","_ref2","_slicedToArray","key","camelCaseObject","snakeCaseObject","convertKeyNames","nameMap","transformer","parseURL","url","document","parser","createElement","href","getPath","_parseURL","pathname","getQueryParameters","search","arguments","length","global","location","keyValueFragments","slice","indexOf","split","filter","hash","reduce","params","keyValueFragment","assign","_defineProperty","decodeURIComponent","ensureDefinedConfig","requester","keys","console","warn","concat"],"sources":["../src/utils.js"],"sourcesContent":["/**\r\n * #### Import members from **@edx/frontend-platform**\r\n *\r\n * @module Utilities\r\n */\r\nimport camelCase from 'lodash.camelcase';\r\nimport snakeCase from 'lodash.snakecase';\r\n\r\n/**\r\n * This is the underlying function used by camelCaseObject, snakeCaseObject, and convertKeyNames\r\n * above.\r\n *\r\n * Given an object (or array) and a modification function, will perform the function on each key it\r\n * encounters on the object and its tree of children.\r\n *\r\n * The modification function must take a string as an argument and returns a string.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * (key) => {\r\n *   if (key === 'edX') {\r\n *     return 'Open edX';\r\n *   }\r\n *   return key;\r\n * }\r\n * ```\r\n *\r\n * This function will turn any key that matches 'edX' into 'Open edX'.  All other keys will be\r\n * passed through unmodified.\r\n *\r\n * Can accept arrays as well as objects, and will perform its conversion on any objects it finds in\r\n * the array.\r\n *\r\n * @param {Object} object\r\n * @param {function} modify\r\n * @returns {Object}\r\n */\r\nexport function modifyObjectKeys(object, modify) {\r\n  // If the passed in object is not an Object, return it.\r\n  if (\r\n    object === undefined\r\n    || object === null\r\n    || (typeof object !== 'object' && !Array.isArray(object))\r\n  ) {\r\n    return object;\r\n  }\r\n\r\n  if (Array.isArray(object)) {\r\n    return object.map(value => modifyObjectKeys(value, modify));\r\n  }\r\n\r\n  // Otherwise, process all its keys.\r\n  const result = {};\r\n  Object.entries(object).forEach(([key, value]) => {\r\n    result[modify(key)] = modifyObjectKeys(value, modify);\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Performs a deep conversion to camelCase on all keys in the provided object and its tree of\r\n * children.  Uses [lodash.camelcase](https://lodash.com/docs/4.17.15#camelCase) on each key.  This\r\n * is commonly used to convert snake_case keys in models from a backend server into camelCase keys\r\n * for use in the JavaScript client.\r\n *\r\n * Can accept arrays as well as objects, and will perform its conversion on any objects it finds in\r\n * the array.\r\n *\r\n * @param {Array|Object} object\r\n * @returns {Array|Object}\r\n */\r\nexport function camelCaseObject(object) {\r\n  return modifyObjectKeys(object, camelCase);\r\n}\r\n\r\n/**\r\n * Performs a deep conversion to snake_case on all keys in the provided object and its tree of\r\n * children.  Uses [lodash.snakecase](https://lodash.com/docs/4.17.15#snakeCase) on each key.  This\r\n * is commonly used to convert camelCase keys from the JavaScript app into snake_case keys expected\r\n * by backend servers.\r\n *\r\n * Can accept arrays as well as objects, and will perform its conversion on any objects it finds in\r\n * the array.\r\n *\r\n * @param {Array|Object} object\r\n * @returns {Array|Object}\r\n */\r\nexport function snakeCaseObject(object) {\r\n  return modifyObjectKeys(object, snakeCase);\r\n}\r\n\r\n/**\r\n * Given a map of key-value pairs, performs a deep conversion key names in the specified object\r\n * _from_ the key _to_ the value.  This is useful for updating names in an API request to the names\r\n * used throughout a client application if they happen to differ.  It can also be used in the\r\n * reverse - formatting names from the client application to names expected by an API.\r\n *\r\n * ```\r\n * import { convertKeyNames } from '@edx/frontend-base';\r\n *\r\n * // This object can be of any shape or depth with subobjects/arrays.\r\n * const myObject = {\r\n *   myKey: 'my value',\r\n * }\r\n *\r\n * const result = convertKeyNames(myObject, { myKey: 'their_key' });\r\n *\r\n * console.log(result) // { their_key: 'my value' }\r\n * ```\r\n *\r\n * Can accept arrays as well as objects, and will perform its conversion on any objects it finds in\r\n * the array.\r\n *\r\n * @param {Array|Object} object\r\n * @param {Object} nameMap\r\n * @returns {Array|Object}\r\n */\r\nexport function convertKeyNames(object, nameMap) {\r\n  const transformer = key => (nameMap[key] === undefined ? key : nameMap[key]);\r\n\r\n  return modifyObjectKeys(object, transformer);\r\n}\r\n\r\n/**\r\n * Given a string URL return an element that has been parsed via href.\r\n * This element has the possibility to return different part of the URL.\r\n  parser.protocol; // => \"http:\"\r\n  parser.hostname; // => \"example.com\"\r\n  parser.port;     // => \"3000\"\r\n  parser.pathname; // => \"/pathname/\"\r\n  parser.search;   // => \"?search=test\"\r\n  parser.hash;     // => \"#hash\"\r\n  parser.host;     // => \"example.com:3000\"\r\n * https://gist.github.com/jlong/2428561\r\n *\r\n * @param {string}\r\n * @returns {Object}\r\n */\r\nexport function parseURL(url) {\r\n  if (typeof document !== 'undefined') {\r\n    const parser = document.createElement('a');\r\n    parser.href = url;\r\n    return parser;\r\n  }\r\n\r\n  return {};\r\n}\r\n\r\n/**\r\n * Given a string URL return the path of the URL\r\n *\r\n *\r\n * @param {string}\r\n * @returns {string}\r\n */\r\nexport function getPath(url) {\r\n  return typeof document !== 'undefined' ? parseURL(url)?.pathname : '';\r\n}\r\n\r\n/**\r\n * *Deprecated*: A method which converts the supplied query string into an object of\r\n * key-value pairs and returns it.  Defaults to the current query string - should perform like\r\n * [window.searchParams](https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams)\r\n *\r\n * @deprecated\r\n * @param {string} [search=global.location.search]\r\n * @returns {Object}\r\n */\r\nexport function getQueryParameters(search = global.location.search) {\r\n  const keyValueFragments = search\r\n    .slice(search.indexOf('?') + 1)\r\n    .split('&')\r\n    .filter(hash => hash !== '');\r\n\r\n  return keyValueFragments.reduce((params, keyValueFragment) => {\r\n    const split = keyValueFragment.indexOf('=');\r\n    const key = keyValueFragment.slice(0, split);\r\n    const value = keyValueFragment.slice(split + 1);\r\n    return Object.assign(params, { [key]: decodeURIComponent(value) });\r\n  }, {});\r\n}\r\n\r\n/**\r\n * This function helps catch a certain class of misconfiguration in which configuration variables\r\n * are not properly defined and/or supplied to a consumer that requires them.  Any key that exists\r\n * is still set to \"undefined\" indicates a misconfiguration further up in the application, and\r\n * should be flagged as an error, and is logged to 'warn'.\r\n *\r\n * Keys that are intended to be falsy should be defined using null, 0, false, etc.\r\n *\r\n * @param {Object} object\r\n * @param {string} requester A human-readable identifier for the code which called this function.\r\n * Used when throwing errors to aid in debugging.\r\n */\r\nexport function ensureDefinedConfig(object, requester) {\r\n  Object.keys(object).forEach((key) => {\r\n    if (object[key] === undefined) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(`Module configuration error: ${key} is required by ${requester}.`);\r\n    }\r\n  });\r\n}\r\n"],"mappings":"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"}