{"version":3,"file":"SegmentAnalyticsService.js","names":["formurlencoded","snakeCaseObject","SegmentAnalyticsService","_ref","httpClient","loggingService","config","_classCallCheck","trackingLogApiUrl","concat","LMS_BASE_URL","segmentKey","SEGMENT_KEY","hasIdentifyBeenCalled","segmentInitialized","initializeSegment","_createClass","key","value","_this","global","analytics","_global","initialize","invoked","methods","factory","method","_len","arguments","length","args","Array","_key","unshift","push","forEach","load","options","script","document","createElement","type","onerror","event","Event","dispatchEvent","async","src","first","getElementsByTagName","parentNode","insertBefore","_loadOptions","SNIPPET_VERSION","checkIdentifyCalled","logError","sendTrackingLogEvent","eventName","properties","_this2","snakeEventData","deep","serverData","event_type","JSON","stringify","page","location","href","post","headers","error","identifyAuthenticatedUser","userId","traits","Error","identify","identifyAnonymousUser","_this3","Promise","resolve","reject","ready","user","id","reset","addEventListener","setTimeout","ga","create","google_tag_manager","sendTrackEvent","track","sendPageEvent","category","name"],"sources":["../../src/analytics/SegmentAnalyticsService.js"],"sourcesContent":["import formurlencoded from 'form-urlencoded';\r\nimport { snakeCaseObject } from '../utils';\r\n\r\n/**\r\n * @implements {AnalyticsService}\r\n * @memberof module:Analytics\r\n */\r\nclass SegmentAnalyticsService {\r\n  constructor({ httpClient, loggingService, config }) {\r\n    this.loggingService = loggingService;\r\n    this.httpClient = httpClient;\r\n    this.trackingLogApiUrl = `${config.LMS_BASE_URL}/event`;\r\n    this.segmentKey = config.SEGMENT_KEY;\r\n    this.hasIdentifyBeenCalled = false;\r\n    this.segmentInitialized = false;\r\n\r\n    if (this.segmentKey) {\r\n      this.initializeSegment();\r\n    }\r\n  }\r\n\r\n  // The code in this function is from Segment's website, with a few updates:\r\n  // - It uses the segmentKey from the SegmentAnalyticsService instance.\r\n  // - It also saves a \"segmentInitialized\" variable on the SegmentAnalyticsService instance so\r\n  //   that the service can keep track of its own initialization state.\r\n  // Reference:\r\n  // https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/quickstart/\r\n  initializeSegment() {\r\n    // Create a queue, but don't obliterate an existing one!\r\n    global.analytics = global.analytics || [];\r\n    const { analytics } = global;\r\n\r\n    // If the real analytics.js is already on the page return.\r\n    if (analytics.initialize) {\r\n      this.segmentInitialized = true;\r\n      return;\r\n    }\r\n\r\n    // If the snippet was invoked do nothing.\r\n    if (analytics.invoked) {\r\n      this.segmentInitialized = true;\r\n      return;\r\n    }\r\n\r\n    // Invoked flag, to make sure the snippet\r\n    // is never invoked twice.\r\n    analytics.invoked = true;\r\n\r\n    // A list of the methods in Analytics.js to stub.\r\n    analytics.methods = [\r\n      'trackSubmit',\r\n      'trackClick',\r\n      'trackLink',\r\n      'trackForm',\r\n      'pageview',\r\n      'identify',\r\n      'reset',\r\n      'group',\r\n      'track',\r\n      'ready',\r\n      'alias',\r\n      'debug',\r\n      'page',\r\n      'once',\r\n      'off',\r\n      'on',\r\n    ];\r\n\r\n    // Define a factory to create stubs. These are placeholders\r\n    // for methods in Analytics.js so that you never have to wait\r\n    // for it to load to actually record data. The `method` is\r\n    // stored as the first argument, so we can replay the data.\r\n    analytics.factory = method => ((...args) => {\r\n      args.unshift(method);\r\n      analytics.push(args);\r\n      return analytics;\r\n    });\r\n\r\n    // For each of our methods, generate a queueing stub.\r\n    analytics.methods.forEach((key) => {\r\n      analytics[key] = analytics.factory(key);\r\n    });\r\n\r\n    // Define a method to load Analytics.js from our CDN,\r\n    // and that will be sure to only ever load it once.\r\n    analytics.load = (key, options) => {\r\n      // Create an async script element based on your key.\r\n      const script = document.createElement('script');\r\n      script.type = 'text/javascript';\r\n      script.onerror = () => {\r\n        this.segmentInitialized = false;\r\n        const event = new Event('segmentFailed');\r\n        document.dispatchEvent(event);\r\n      };\r\n      script.async = true;\r\n      script.src = `https://cdn.segment.com/analytics.js/v1/${key}/analytics.min.js`;\r\n\r\n      // Insert our script next to the first script element.\r\n      const first = document.getElementsByTagName('script')[0];\r\n      first.parentNode.insertBefore(script, first);\r\n      analytics._loadOptions = options; // eslint-disable-line no-underscore-dangle\r\n\r\n      this.segmentInitialized = true;\r\n    };\r\n\r\n    // Add a version to keep track of what's in the wild.\r\n    analytics.SNIPPET_VERSION = '4.1.0';\r\n\r\n    // Load Analytics.js with your key, which will automatically\r\n    // load the tools you've enabled for your account. Boosh!\r\n    analytics.load(this.segmentKey);\r\n  }\r\n\r\n  /**\r\n   * Checks that identify was first called.  Otherwise, logs error.\r\n   *\r\n   */\r\n  checkIdentifyCalled() {\r\n    if (!this.hasIdentifyBeenCalled) {\r\n      this.loggingService.logError('Identify must be called before other tracking events.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs events to tracking log and downstream.\r\n   * For tracking log event documentation, see\r\n   * https://openedx.atlassian.net/wiki/spaces/AN/pages/13205895/Event+Design+and+Review+Process\r\n   *\r\n   * @param {string} eventName (event_type on backend, but named to match Segment api)\r\n   * @param {Object} properties (event on backend, but named properties to match Segment api)\r\n   * @returns {Promise} The promise returned by HttpClient.post.\r\n   */\r\n  sendTrackingLogEvent(eventName, properties) {\r\n    const snakeEventData = snakeCaseObject(properties, { deep: true });\r\n    const serverData = {\r\n      event_type: eventName,\r\n      event: JSON.stringify(snakeEventData),\r\n      page: global.location.href,\r\n    };\r\n    return this.httpClient.post(\r\n      this.trackingLogApiUrl,\r\n      formurlencoded(serverData),\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      },\r\n    ).catch((error) => {\r\n      this.loggingService.logError(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * * Send identify call to Segment.\r\n   *\r\n   * @param {string} userId\r\n   * @param {*} [traits]\r\n   */\r\n  identifyAuthenticatedUser(userId, traits) {\r\n    if (!userId) {\r\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\r\n    }\r\n\r\n    if (!this.segmentInitialized) {\r\n      return;\r\n    }\r\n    global.analytics.identify(userId, traits);\r\n    this.hasIdentifyBeenCalled = true;\r\n  }\r\n\r\n  /**\r\n   * Send anonymous identify call to Segment's identify.\r\n   *\r\n   * @param {*} [traits]\r\n   * @returns {Promise} Promise that will resolve once the document readyState is complete\r\n   */\r\n  identifyAnonymousUser(traits) { // eslint-disable-line no-unused-vars\r\n    if (!this.segmentInitialized) {\r\n      return Promise.resolve();\r\n    }\r\n    // if we do not have an authenticated user (indicated by being in this method),\r\n    // but we still have a user id associated in segment, reset the local segment state\r\n    // This has to be wrapped in the analytics.ready() callback because the analytics.user()\r\n    // function isn't available until the analytics.js package has finished initializing.\r\n    return new Promise((resolve, reject) => { // eslint-disable-line no-unused-vars\r\n      global.analytics.ready(() => {\r\n        if (global.analytics.user().id()) {\r\n          global.analytics.reset();\r\n        }\r\n        // We donâ€™t need to call `identify` for anonymous users and can just make the value of\r\n        // hasIdentifyBeenCalled true. Segment automatically assigns them an anonymousId, so\r\n        // just calling `page` and `track` works fine without identify.\r\n        this.hasIdentifyBeenCalled = true;\r\n        resolve();\r\n      });\r\n\r\n      // this is added to handle a specific use-case where if a user has blocked the analytics\r\n      // tools in their browser, this promise does not get resolved and user sees a blank\r\n      // page. Dispatching this event in script.onerror callback in analytics.load.\r\n      document.addEventListener('segmentFailed', resolve);\r\n      // This is added to handle the google analytics blocked case which is injected into\r\n      // the DOM by segment.min.js.\r\n      setTimeout(() => {\r\n        if (!global.ga || !global.ga.create || !global.google_tag_manager) {\r\n          this.segmentInitialized = false;\r\n          resolve();\r\n        }\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sends a track event to Segment and downstream.\r\n   * Note: For links and forms, you should use trackLink and trackForm instead.\r\n   *\r\n   * @param {*} eventName\r\n   * @param {*} [properties]\r\n   */\r\n  sendTrackEvent(eventName, properties) {\r\n    if (!this.segmentInitialized) {\r\n      return;\r\n    }\r\n    this.checkIdentifyCalled();\r\n    global.analytics.track(eventName, properties);\r\n  }\r\n\r\n  /**\r\n   * Sends a page event to Segment and downstream.\r\n   *\r\n   * @param {*} [name] If only one string arg provided, assumed to be name.\r\n   * @param {*} [category] Name is required to pass a category.\r\n   * @param {*} [properties]\r\n   */\r\n  sendPageEvent(category, name, properties) {\r\n    if (!this.segmentInitialized) {\r\n      return;\r\n    }\r\n    this.checkIdentifyCalled();\r\n    global.analytics.page(category, name, properties);\r\n  }\r\n}\r\n\r\nexport default SegmentAnalyticsService;\r\n"],"mappings":"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","ignoreList":[]}