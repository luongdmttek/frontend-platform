{"version":3,"file":"MockAnalyticsService.js","names":["MockAnalyticsService","_createClass","_ref","_this","httpClient","loggingService","_classCallCheck","_defineProperty","jest","fn","hasIdentifyBeenCalled","logError","Promise","resolve","userId","Error","checkIdentifyCalled"],"sources":["../../src/analytics/MockAnalyticsService.js"],"sourcesContent":["/**\r\n * The MockAnalyticsService implements all functions of AnalyticsService as Jest mocks (jest.fn())).\r\n * It emulates the behavior of a real analytics service but witohut making any requests. It has no\r\n * other functionality.\r\n *\r\n * @implements {AnalyticsService}\r\n * @memberof module:Analytics\r\n */\r\nclass MockAnalyticsService {\r\n  static hasIdentifyBeenCalled = false;\r\n\r\n  constructor({ httpClient, loggingService }) {\r\n    this.loggingService = loggingService;\r\n    this.httpClient = httpClient;\r\n  }\r\n\r\n  checkIdentifyCalled = jest.fn(() => {\r\n    if (!this.hasIdentifyBeenCalled) {\r\n      this.loggingService.logError('Identify must be called before other tracking events.');\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns a resolved promise.\r\n   *\r\n   * @returns {Promise} The promise returned by HttpClient.post.\r\n   */\r\n  sendTrackingLogEvent = jest.fn(() => Promise.resolve());\r\n\r\n  /**\r\n   * No-op, but records that identify has been called.\r\n   *\r\n   * @param {string} userId\r\n   * @throws {Error} If userId argument is not supplied.\r\n   */\r\n  identifyAuthenticatedUser = jest.fn((userId) => {\r\n    if (!userId) {\r\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\r\n    }\r\n    this.hasIdentifyBeenCalled = true;\r\n  });\r\n\r\n  /**\r\n   * No-op, but records that it has been called to prevent double-identification.\r\n   * @returns {Promise} A resolved promise.\r\n   */\r\n  identifyAnonymousUser = jest.fn(() => {\r\n    this.hasIdentifyBeenCalled = true;\r\n    return Promise.resolve();\r\n  });\r\n\r\n  /**\r\n   * Logs the event to the console.\r\n   *\r\n   * Checks whether identify has been called, logging an error to the logging service if not.\r\n   */\r\n  sendTrackEvent = jest.fn(() => {\r\n    this.checkIdentifyCalled();\r\n  });\r\n\r\n  /**\r\n   * Logs the event to the console.\r\n   *\r\n   * Checks whether identify has been called, logging an error to the logging service if not.\r\n   */\r\n  sendPageEvent = jest.fn(() => {\r\n    this.checkIdentifyCalled();\r\n  });\r\n}\r\n\r\nexport default MockAnalyticsService;\r\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAQMA,oBAAoB,gBAAAC,YAAA,CAGxB,SAAAD,qBAAAE,IAAA,EAA4C;EAAA,IAAAC,KAAA;EAAA,IAA9BC,UAAU,GAAAF,IAAA,CAAVE,UAAU;IAAEC,cAAc,GAAAH,IAAA,CAAdG,cAAc;EAAAC,eAAA,OAAAN,oBAAA;EAAAO,eAAA,8BAKlBC,IAAI,CAACC,EAAE,CAAC,YAAM;IAClC,IAAI,CAACN,KAAI,CAACO,qBAAqB,EAAE;MAC/BP,KAAI,CAACE,cAAc,CAACM,QAAQ,CAAC,uDAAuD,CAAC;IACvF;EACF,CAAC,CAAC;EAEF;AACF;AACA;AACA;AACA;EAJEJ,eAAA,+BAKuBC,IAAI,CAACC,EAAE,CAAC;IAAA,OAAMG,OAAO,CAACC,OAAO,CAAC,CAAC;EAAA,EAAC;EAEvD;AACF;AACA;AACA;AACA;AACA;EALEN,eAAA,oCAM4BC,IAAI,CAACC,EAAE,CAAC,UAACK,MAAM,EAAK;IAC9C,IAAI,CAACA,MAAM,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;IACtE;IACAZ,KAAI,CAACO,qBAAqB,GAAG,IAAI;EACnC,CAAC,CAAC;EAEF;AACF;AACA;AACA;EAHEH,eAAA,gCAIwBC,IAAI,CAACC,EAAE,CAAC,YAAM;IACpCN,KAAI,CAACO,qBAAqB,GAAG,IAAI;IACjC,OAAOE,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B,CAAC,CAAC;EAEF;AACF;AACA;AACA;AACA;EAJEN,eAAA,yBAKiBC,IAAI,CAACC,EAAE,CAAC,YAAM;IAC7BN,KAAI,CAACa,mBAAmB,CAAC,CAAC;EAC5B,CAAC,CAAC;EAEF;AACF;AACA;AACA;AACA;EAJET,eAAA,wBAKgBC,IAAI,CAACC,EAAE,CAAC,YAAM;IAC5BN,KAAI,CAACa,mBAAmB,CAAC,CAAC;EAC5B,CAAC,CAAC;EAvDA,IAAI,CAACX,cAAc,GAAGA,cAAc;EACpC,IAAI,CAACD,UAAU,GAAGA,UAAU;AAC9B,CAAC;AAAAG,eAAA,CANGP,oBAAoB,2BACO,KAAK;AA6DtC,eAAeA,oBAAoB","ignoreList":[]}